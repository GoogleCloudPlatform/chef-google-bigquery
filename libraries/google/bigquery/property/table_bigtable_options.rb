# Copyright 2018 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------

module Google
  module Bigquery
    module Data
      # A class to manage data for BigtableOptions for table.
      class TableBigtableOptions
        include Comparable

        attr_reader :ignore_unspecified_column_families
        attr_reader :read_rowkey_as_string
        attr_reader :column_families

        def to_json(_arg = nil)
          {
            'ignoreUnspecifiedColumnFamilies' => ignore_unspecified_column_families,
            'readRowkeyAsString' => read_rowkey_as_string,
            'columnFamilies' => column_families
          }.reject { |_k, v| v.nil? }.to_json
        end

        def to_s
          {
            ignore_unspecified_column_families: ignore_unspecified_column_families.to_s,
            read_rowkey_as_string: read_rowkey_as_string.to_s,
            column_families: ['[',
                              column_families.map(&:to_json).join(', '),
                              ']'].join(' ')
          }.map { |k, v| "#{k}: #{v}" }.join(', ')
        end

        def ==(other)
          return false unless other.is_a? TableBigtableOptions
          compare_fields(other).each do |compare|
            next if compare[:self].nil? || compare[:other].nil?
            return false if compare[:self] != compare[:other]
          end
          true
        end

        def <=>(other)
          return false unless other.is_a? TableBigtableOptions
          compare_fields(other).each do |compare|
            next if compare[:self].nil? || compare[:other].nil?
            result = compare[:self] <=> compare[:other]
            return result unless result.zero?
          end
          0
        end

        def inspect
          to_json
        end

        private

        def compare_fields(other)
          [
            {
              self: ignore_unspecified_column_families,
              other: other.ignore_unspecified_column_families
            },
            { self: read_rowkey_as_string, other: other.read_rowkey_as_string },
            { self: column_families, other: other.column_families }
          ]
        end
      end

      # Manages a TableBigtableOptions nested object
      # Data is coming from the GCP API
      class TableBigtableOptionsApi < TableBigtableOptions
        def initialize(args)
          @ignore_unspecified_column_families =
            Google::Bigquery::Property::Boolean.api_parse(args['ignoreUnspecifiedColumnFamilies'])
          @read_rowkey_as_string =
            Google::Bigquery::Property::Boolean.api_parse(args['readRowkeyAsString'])
          @column_families =
            Google::Bigquery::Property::TableColumnFamiliesArray.api_parse(args['columnFamilies'])
        end
      end

      # Manages a TableBigtableOptions nested object
      # Data is coming from the Chef catalog
      class TableBigtableOptionsCatalog < TableBigtableOptions
        def initialize(args)
          @ignore_unspecified_column_families = Google::Bigquery::Property::Boolean.catalog_parse(
            args[:ignore_unspecified_column_families]
          )
          @read_rowkey_as_string =
            Google::Bigquery::Property::Boolean.catalog_parse(args[:read_rowkey_as_string])
          @column_families = Google::Bigquery::Property::TableColumnFamiliesArray.catalog_parse(
            args[:column_families]
          )
        end
      end
    end

    module Property
      # A class to manage input to BigtableOptions for table.
      class TableBigtableOptions
        def self.coerce
          ->(x) { ::Google::Bigquery::Property::TableBigtableOptions.catalog_parse(x) }
        end

        # Used for parsing Chef catalog
        def self.catalog_parse(value)
          return if value.nil?
          return value if value.is_a? Data::TableBigtableOptions
          Data::TableBigtableOptionsCatalog.new(value)
        end

        # Used for parsing GCP API responses
        def self.api_parse(value)
          return if value.nil?
          return value if value.is_a? Data::TableBigtableOptions
          Data::TableBigtableOptionsApi.new(value)
        end
      end
    end
  end
end
